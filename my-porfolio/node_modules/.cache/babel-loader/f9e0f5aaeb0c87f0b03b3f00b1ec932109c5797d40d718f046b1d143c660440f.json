{"ast":null,"code":"import React from\"react\";// const colorMode = ['dark', 'ligth', 'green', 'yellow', 'red']\n// function random () {\n//     let random = Math.floor(Math.random() * colorMode.length)\n//     return random\n// }\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={// with this we keep user auth after login\nuserInfo:localStorage.getItem(\"userInfo\")?JSON.parse(localStorage.getItem(\"userInfo\")):null//   mode: localStorage.getItem(\"mode\")\n//     ? localStorage.getItem(\"mode\")!\n//     : colorMode[random()],\n};function reducer(state,action){switch(action.type){//  case 'SWITCH_MODE':\n//    return {mode: colorMode[random()]}\ncase'USER_SIGNIN':return{...state,userInfo:action.payload};case'USER_SIGNOUT':// we clear all data. because we dont put in return state userInfo it will be null\nreturn{};default:return state;}}const defaultDispatch=()=>initialState;const Store=/*#__PURE__*/React.createContext({state:initialState,dispatch:defaultDispatch});// eslint-disable-next-line @typescript-eslint/ban-types\nfunction StoreProvider(props){const[state,dispatch]=React.useReducer(reducer,initialState);return/*#__PURE__*/_jsx(Store.Provider,{value:{state,dispatch},...props});}export{Store,StoreProvider};","map":{"version":3,"names":["React","jsx","_jsx","initialState","userInfo","localStorage","getItem","JSON","parse","reducer","state","action","type","payload","defaultDispatch","Store","createContext","dispatch","StoreProvider","props","useReducer","Provider","value"],"sources":["C:/Users/bilan/Desktop/vs code/react/my-own/my-portfolio/my-porfolio/src/Store.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { UserInfo } from \"./types/UserInfo\";\r\n\r\n// const colorMode = ['dark', 'ligth', 'green', 'yellow', 'red']\r\n// function random () {\r\n//     let random = Math.floor(Math.random() * colorMode.length)\r\n//     return random\r\n// }\r\n\r\ntype AppState = {\r\n  //   mode: string;\r\n  userInfo?: UserInfo;\r\n};\r\n\r\nconst initialState: AppState = {\r\n  // with this we keep user auth after login\r\n  userInfo: localStorage.getItem(\"userInfo\")\r\n    ? JSON.parse(localStorage.getItem(\"userInfo\")!)\r\n    : null,\r\n  //   mode: localStorage.getItem(\"mode\")\r\n  //     ? localStorage.getItem(\"mode\")!\r\n  //     : colorMode[random()],\r\n};\r\n\r\ntype Action = \r\n// | { type: 'SWITCH_MODE'}\r\n| {type: 'USER_SIGNIN'; payload: UserInfo}\r\n| { type: 'USER_SIGNOUT' }\r\n\r\nfunction reducer(state:AppState, action:Action):AppState {\r\n  switch(action.type){\r\n//  case 'SWITCH_MODE':\r\n//    return {mode: colorMode[random()]}\r\n    case 'USER_SIGNIN':\r\n      return {...state, userInfo: action.payload }\r\n      case 'USER_SIGNOUT':\r\n        // we clear all data. because we dont put in return state userInfo it will be null\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst defaultDispatch: React.Dispatch<Action> = () => initialState\r\n\r\nconst Store = React.createContext({\r\n    state: initialState,\r\n    dispatch: defaultDispatch\r\n})\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction StoreProvider(props: React.PropsWithChildren<{}>) {\r\n    const [state, dispatch] = React.useReducer<React.Reducer<AppState, Action>>(reducer, initialState)\r\n    return <Store.Provider value={{ state, dispatch }} {...props} />\r\n}\r\n\r\nexport { Store, StoreProvider }"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB;AACA;AACA;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAOA,KAAM,CAAAC,YAAsB,CAAG,CAC7B;AACAC,QAAQ,CAAEC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CACtCC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAE,CAAC,CAC7C,IACJ;AACA;AACA;AACF,CAAC,CAOD,QAAS,CAAAG,OAAOA,CAACC,KAAc,CAAEC,MAAa,CAAW,CACvD,OAAOA,MAAM,CAACC,IAAI,EACpB;AACA;AACI,IAAK,aAAa,CAChB,MAAO,CAAC,GAAGF,KAAK,CAAEN,QAAQ,CAAEO,MAAM,CAACE,OAAQ,CAAC,CAC5C,IAAK,cAAc,CACjB;AACF,MAAO,CAAC,CAAC,CACX,QACE,MAAO,CAAAH,KAAK,CAChB,CACF,CAEA,KAAM,CAAAI,eAAuC,CAAGA,CAAA,GAAMX,YAAY,CAElE,KAAM,CAAAY,KAAK,cAAGf,KAAK,CAACgB,aAAa,CAAC,CAC9BN,KAAK,CAAEP,YAAY,CACnBc,QAAQ,CAAEH,eACd,CAAC,CAAC,CAEF;AACA,QAAS,CAAAI,aAAaA,CAACC,KAAkC,CAAE,CACvD,KAAM,CAACT,KAAK,CAAEO,QAAQ,CAAC,CAAGjB,KAAK,CAACoB,UAAU,CAAkCX,OAAO,CAAEN,YAAY,CAAC,CAClG,mBAAOD,IAAA,CAACa,KAAK,CAACM,QAAQ,EAACC,KAAK,CAAE,CAAEZ,KAAK,CAAEO,QAAS,CAAE,IAAKE,KAAK,CAAG,CAAC,CACpE,CAEA,OAASJ,KAAK,CAAEG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport apiClient from '../apiClient';\nexport const useGetCommentsQuery = slug => {\n  _s();\n  return useQuery({\n    queryKey: ['comments'],\n    queryFn: async () => (await apiClient.get(`api/projects/${slug}/comment`)).data\n  });\n};\n_s(useGetCommentsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCreateCommentMutation = slug => {\n  _s2();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      content\n    }) => (await apiClient.post(`api/projects/${slug}/comment`, {\n      content\n    })).data,\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['comments']\n      });\n    }\n  });\n};\n_s2(useCreateCommentMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useUpdateCommentMutation = (slug, commentId) => {\n  _s3();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      content\n    }) => (await apiClient.put(`api/projects/${slug}/comment/${commentId}`, {\n      content\n    })).data,\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['comments']\n      });\n    }\n  });\n};\n_s3(useUpdateCommentMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useDeleteCommentMutation = (slug, commentId) => {\n  _s4();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async () => await apiClient.delete(`api/projects/${slug}/comment/${commentId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['comments']\n      });\n    }\n  });\n};\n_s4(useDeleteCommentMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQuery","useQueryClient","apiClient","useGetCommentsQuery","slug","_s","queryKey","queryFn","get","data","useCreateCommentMutation","_s2","queryClient","mutationFn","content","post","onSuccess","invalidateQueries","useUpdateCommentMutation","commentId","_s3","put","useDeleteCommentMutation","_s4","delete"],"sources":["C:/Users/bilan/Desktop/vs code/react/my-own/my-portfolio/my-porfolio/src/hooks/commentHook.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\r\nimport apiClient from '../apiClient'\r\nimport { Comment } from '../types/CommentType'\r\n\r\n\r\nexport const useGetCommentsQuery = (slug:string) =>\r\n  useQuery({\r\n    queryKey: ['comments'],\r\n    queryFn: async () => (await apiClient.get<Comment[]>(`api/projects/${slug}/comment`)).data,\r\n  })\r\n\r\n  export const useCreateCommentMutation = (slug: string) => {\r\n    const queryClient = useQueryClient()\r\n    return useMutation({\r\n      mutationFn: async ({\r\n        content,\r\n      }: {\r\n        content: string\r\n      }) =>\r\n        (\r\n          await apiClient.post<Comment>(`api/projects/${slug}/comment`, {\r\n            content,\r\n          })\r\n        ).data,\r\n       onSuccess: () => {\r\n        queryClient.invalidateQueries({queryKey: ['comments']})\r\n       }\r\n    })\r\n  }\r\n    export const useUpdateCommentMutation = (slug: string, commentId: string) => {\r\n      const queryClient = useQueryClient()\r\n      return useMutation({\r\n        mutationFn: async ({\r\n          content,\r\n        }: {\r\n          content: string\r\n        }) =>\r\n          (\r\n            await apiClient.put<Comment>(`api/projects/${slug}/comment/${commentId}`, {\r\n              content,\r\n            })\r\n          ).data,\r\n          onSuccess: () => {\r\n            queryClient.invalidateQueries({queryKey: ['comments']})\r\n           }\r\n      })}\r\n  \r\n    export const useDeleteCommentMutation = (slug: string, commentId: string) => {\r\n      const queryClient = useQueryClient()\r\n      return useMutation({\r\n        mutationFn: async () =>\r\n          (\r\n            await apiClient.delete<Comment>(`api/projects/${slug}/comment/${commentId}`)\r\n          ),\r\n          onSuccess: () => {\r\n            queryClient.invalidateQueries({queryKey: ['comments']})\r\n           }\r\n      })}"],"mappings":";;;;AAAA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,cAAc,QAAQ,uBAAuB;AAC7E,OAAOC,SAAS,MAAM,cAAc;AAIpC,OAAO,MAAMC,mBAAmB,GAAIC,IAAW;EAAAC,EAAA;EAAA,OAC7CL,QAAQ,CAAC;IACPM,QAAQ,EAAE,CAAC,UAAU,CAAC;IACtBC,OAAO,EAAE,MAAAA,CAAA,KAAY,CAAC,MAAML,SAAS,CAACM,GAAG,CAAY,gBAAgBJ,IAAI,UAAU,CAAC,EAAEK;EACxF,CAAC,CAAC;AAAA;AAAAJ,EAAA,CAJSF,mBAAmB;EAAA,QAC9BH,QAAQ;AAAA;AAKR,OAAO,MAAMU,wBAAwB,GAAIN,IAAY,IAAK;EAAAO,GAAA;EACxD,MAAMC,WAAW,GAAGX,cAAc,CAAC,CAAC;EACpC,OAAOF,WAAW,CAAC;IACjBc,UAAU,EAAE,MAAAA,CAAO;MACjBC;IAGF,CAAC,KACC,CACE,MAAMZ,SAAS,CAACa,IAAI,CAAU,gBAAgBX,IAAI,UAAU,EAAE;MAC5DU;IACF,CAAC,CAAC,EACFL,IAAI;IACPO,SAAS,EAAEA,CAAA,KAAM;MAChBJ,WAAW,CAACK,iBAAiB,CAAC;QAACX,QAAQ,EAAE,CAAC,UAAU;MAAC,CAAC,CAAC;IACxD;EACH,CAAC,CAAC;AACJ,CAAC;AAAAK,GAAA,CAjBYD,wBAAwB;EAAA,QACfT,cAAc,EAC3BF,WAAW;AAAA;AAgBlB,OAAO,MAAMmB,wBAAwB,GAAGA,CAACd,IAAY,EAAEe,SAAiB,KAAK;EAAAC,GAAA;EAC3E,MAAMR,WAAW,GAAGX,cAAc,CAAC,CAAC;EACpC,OAAOF,WAAW,CAAC;IACjBc,UAAU,EAAE,MAAAA,CAAO;MACjBC;IAGF,CAAC,KACC,CACE,MAAMZ,SAAS,CAACmB,GAAG,CAAU,gBAAgBjB,IAAI,YAAYe,SAAS,EAAE,EAAE;MACxEL;IACF,CAAC,CAAC,EACFL,IAAI;IACNO,SAAS,EAAEA,CAAA,KAAM;MACfJ,WAAW,CAACK,iBAAiB,CAAC;QAACX,QAAQ,EAAE,CAAC,UAAU;MAAC,CAAC,CAAC;IACxD;EACL,CAAC,CAAC;AAAA,CAAC;AAAAc,GAAA,CAhBQF,wBAAwB;EAAA,QACfjB,cAAc,EAC3BF,WAAW;AAAA;AAgBpB,OAAO,MAAMuB,wBAAwB,GAAGA,CAAClB,IAAY,EAAEe,SAAiB,KAAK;EAAAI,GAAA;EAC3E,MAAMX,WAAW,GAAGX,cAAc,CAAC,CAAC;EACpC,OAAOF,WAAW,CAAC;IACjBc,UAAU,EAAE,MAAAA,CAAA,KAER,MAAMX,SAAS,CAACsB,MAAM,CAAU,gBAAgBpB,IAAI,YAAYe,SAAS,EAAE,CAC5E;IACDH,SAAS,EAAEA,CAAA,KAAM;MACfJ,WAAW,CAACK,iBAAiB,CAAC;QAACX,QAAQ,EAAE,CAAC,UAAU;MAAC,CAAC,CAAC;IACxD;EACL,CAAC,CAAC;AAAA,CAAC;AAAAiB,GAAA,CAVQD,wBAAwB;EAAA,QACfrB,cAAc,EAC3BF,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}